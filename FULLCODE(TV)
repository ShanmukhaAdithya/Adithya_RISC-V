\m4_TLV_version 1d: tl-x.org
\SV
   // This code can be found in: https://github.com/stevehoover/LF-Building-a-RISC-V-CPU-Core/risc-v_shell.tlv
   
   m4_include_lib(['https://raw.githubusercontent.com/stevehoover/LF-Building-a-RISC-V-CPU-Core/main/lib/risc-v_shell_lib.tlv'])
   //Coded by Shanmukha_Adithya_Akkiraju



   //---------------------------------------------------------------------------------
   // /====================\
   // | Sum 1 to 9 Program |
   // \====================/
   //
   // Program to test RV32I
   // Add 1,2,3,...,9 (in that order).
   //
   // Regs:
   //  x12 (a2): 10
   //  x13 (a3): 1..10
   //  x14 (a4): Sum
   // 
   m4_asm(ADDI, x14, x0, 0)             // Initialize sum register a4 with 0
   m4_asm(ADDI, x12, x0, 1010)          // Store count of 10 in register a2.
   m4_asm(ADDI, x13, x0, 1)             // Initialize loop count register a3 with 0
   // Loop:
   m4_asm(ADD, x14, x13, x14)           // Incremental summation
   m4_asm(ADDI, x13, x13, 1)            // Increment loop count by 1
   m4_asm(BLT, x13, x12, 1111111111000) // If a3 is less than a2, branch to label named <loop>
   // Test result value in x14, and set x31 to reflect pass/fail.
   m4_asm(ADDI, x30, x14, 111111010100) // Subtract expected value of 44 to set x30 to 1 if and only iff the result is 45 (1 + 2 + ... + 9).
   m4_asm(BGE, x0, x0, 0) // Done. Jump to itself (infinite loop). (Up to 20-bit signed immediate plus implicit 0 bit (unlike JALR) provides byte address; last immediate bit should also be 0)
   //m4_asm_end()
   m4_define(['M4_MAX_CYC'], 50)
   `define READONLY_MEM(ADDR, DATA) logic [31:0] instrs [0:58-1]; assign DATA = instrs[ADDR[$clog2($size(instrs)) + 1 : 2]]; assign instrs = '{{12'b10101, 5'd0, 3'b000, 5'd1, 7'b0010011}, {12'b111, 5'd0, 3'b000, 5'd2, 7'b0010011}, {12'b111111111100, 5'd0, 3'b000, 5'd3, 7'b0010011}, {12'b1011100, 5'd1, 3'b111, 5'd5, 7'b0010011}, {12'b10101, 5'd5, 3'b100, 5'd5, 7'b0010011}, {12'b1011100, 5'd1, 3'b110, 5'd6, 7'b0010011}, {12'b1011100, 5'd6, 3'b100, 5'd6, 7'b0010011}, {12'b111, 5'd1, 3'b000, 5'd7, 7'b0010011}, {12'b11101, 5'd7, 3'b100, 5'd7, 7'b0010011}, {6'b000000, 6'b110, 5'd1, 3'b001, 5'd8, 7'b0010011}, {12'b10101000001, 5'd8, 3'b100, 5'd8, 7'b0010011}, {6'b000000, 6'b10, 5'd1, 3'b101, 5'd9, 7'b0010011}, {12'b100, 5'd9, 3'b100, 5'd9, 7'b0010011}, {7'b0000000, 5'd2, 5'd1, 3'b111, 5'd10, 7'b0110011}, {12'b100, 5'd10, 3'b100, 5'd10, 7'b0010011}, {7'b0000000, 5'd2, 5'd1, 3'b110, 5'd11, 7'b0110011}, {12'b10110, 5'd11, 3'b100, 5'd11, 7'b0010011}, {7'b0000000, 5'd2, 5'd1, 3'b100, 5'd12, 7'b0110011}, {12'b10011, 5'd12, 3'b100, 5'd12, 7'b0010011}, {7'b0000000, 5'd2, 5'd1, 3'b000, 5'd13, 7'b0110011}, {12'b11101, 5'd13, 3'b100, 5'd13, 7'b0010011}, {7'b0100000, 5'd2, 5'd1, 3'b000, 5'd14, 7'b0110011}, {12'b1111, 5'd14, 3'b100, 5'd14, 7'b0010011}, {7'b0000000, 5'd2, 5'd2, 3'b001, 5'd15, 7'b0110011}, {12'b1110000001, 5'd15, 3'b100, 5'd15, 7'b0010011}, {7'b0000000, 5'd2, 5'd1, 3'b101, 5'd16, 7'b0110011}, {12'b1, 5'd16, 3'b100, 5'd16, 7'b0010011}, {7'b0000000, 5'd1, 5'd2, 3'b011, 5'd17, 7'b0110011}, {12'b0, 5'd17, 3'b100, 5'd17, 7'b0010011}, {12'b10101, 5'd2, 3'b011, 5'd18, 7'b0010011}, {12'b0, 5'd18, 3'b100, 5'd18, 7'b0010011}, {20'b00000000000000000000, 5'd19, 7'b0110111}, {12'b1, 5'd19, 3'b100, 5'd19, 7'b0010011}, {6'b010000, 6'b1, 5'd3, 3'b101, 5'd20, 7'b0010011}, {12'b111111111111, 5'd20, 3'b100, 5'd20, 7'b0010011}, {7'b0000000, 5'd1, 5'd3, 3'b010, 5'd21, 7'b0110011}, {12'b0, 5'd21, 3'b100, 5'd21, 7'b0010011}, {12'b1, 5'd3, 3'b010, 5'd22, 7'b0010011}, {12'b0, 5'd22, 3'b100, 5'd22, 7'b0010011}, {7'b0100000, 5'd2, 5'd1, 3'b101, 5'd23, 7'b0110011}, {12'b1, 5'd23, 3'b100, 5'd23, 7'b0010011}, {20'b00000000000000000100, 5'd4, 7'b0010111}, {6'b000000, 6'b111, 5'd4, 3'b101, 5'd24, 7'b0010011}, {12'b10000000, 5'd24, 3'b100, 5'd24, 7'b0010011}, {1'b0, 10'b0000000010, 1'b0, 8'b00000000, 5'd25, 7'b1101111}, {20'b00000000000000000000, 5'd4, 7'b0010111}, {7'b0000000, 5'd4, 5'd25, 3'b100, 5'd25, 7'b0110011}, {12'b1, 5'd25, 3'b100, 5'd25, 7'b0010011}, {12'b10000, 5'd4, 3'b000, 5'd26, 7'b1100111}, {7'b0100000, 5'd4, 5'd26, 3'b000, 5'd26, 7'b0110011}, {12'b111111110001, 5'd26, 3'b000, 5'd26, 7'b0010011}, {7'b0000000, 5'd1, 5'd2, 3'b010, 5'b00001, 7'b0100011}, {12'b1, 5'd2, 3'b010, 5'd27, 7'b0000011}, {12'b10100, 5'd27, 3'b100, 5'd27, 7'b0010011}, {12'b1, 5'd0, 3'b000, 5'd28, 7'b0010011}, {12'b1, 5'd0, 3'b000, 5'd29, 7'b0010011}, {12'b1, 5'd0, 3'b000, 5'd30, 7'b0010011}, {1'b0, 10'b0000000000, 1'b0, 8'b00000000, 5'd0, 7'b1101111}};
                        
   //---------------------------------------------------------------------------------
   


\SV
   m4_makerchip_module   // (Expanded in Nav-TLV pane.)
   /* verilator lint_on WIDTH */
   
                
                       
              
\TLV
   
   
   

   
  
   $reset = *reset ;
   $next_pc[31:0] =  $reset   ? '0              :
                           
                           $taken_br ? $br_tgt_pc :
                           $is_jal   ? $br_tgt_pc   :
                           $is_jalr  ? $jalr_tgt_pc[31:0] :
                           
                   
                           $pc + 32'd4 ;
   $pc[31:0] = >>1$next_pc;
   `READONLY_MEM($pc, $$instr[31:0])   ; 
   $is_u_instr = $instr[6:2] ==? 5'b0x101;
   $is_r_instr = $instr[6:2] == 5'b01011 || 
                    $instr[6:2] == 5'b01100 || 
                    $instr[6:2] == 5'b10100 || 
                    $instr[6:2] == 5'b01110 ;
   $is_i_instr = $instr[6:2] == 5'b00000 || 
                    $instr[6:2] == 5'b00001 || 
                    $instr[6:2] == 5'b00100 || 
                    $instr[6:2] == 5'b00110 ||
                    $instr[6:2] == 5'b11001 ;
         
   $is_s_instr = $instr[6:2] ==? 5'b0100x ;
   $is_j_instr = $instr[6:2] ==? 5'b11011 ;
   $is_b_instr = $instr[6:2] ==? 5'b11000;
   
   $funct3[2:0]   =  $instr[14:12];
   $rs1[4:0]      =  $instr[19:15];
   $rs2[4:0]      =  $instr[24:20];
   $rd[4:0]       =  $instr[11:7];
   $opcode[6:0]   =  $instr[6:0];
   
   $funct3_valid  =  $is_r_instr || $is_i_instr || $is_s_instr || $is_b_instr;
   $rs1_valid     =  $is_r_instr || $is_i_instr || $is_s_instr || $is_b_instr;
   $rs2_valid     =  $is_r_instr || $is_s_instr || $is_b_instr ;
   $rd_valid      =  $is_r_instr || $is_i_instr || $is_u_instr || $is_j_instr;
   $imm_valid     =  $is_i_instr || $is_s_instr || $is_b_instr || $is_u_instr || $is_j_instr;

            
   $imm[31:0]  =  $is_i_instr ?  {{21{$instr[31]}}, $instr[30:20]}                                  :
                  $is_s_instr ?  {{21{$instr[31]}}, $instr[30:25], $instr[11:7]}                    :
                  $is_b_instr ?  {{20{$instr[31]}}, $instr[7], $instr[30:25], $instr[11:8], 1'b0}   :
                  $is_u_instr ?  {$instr[31:12], 12'b0}                                             :
                  $is_j_instr ?  {{12{$instr[31]}}, $instr[19:12], $instr[20], $instr[30:21], 1'b0} :
                                       32'b0 ;
   $dec_bits[10:0] = {$instr[30],$funct3,$opcode};
   $is_beq = $dec_bits ==? 11'bx_000_1100011;
   $is_bne = $dec_bits ==? 11'bx_001_1100011;
   $is_blt = $dec_bits ==? 11'bx_100_1100011;
   $is_bge = $dec_bits ==? 11'bx_101_1100011;      
   $is_bltu = $dec_bits ==? 11'bx_110_1100011;
   $is_bgeu = $dec_bits ==? 11'bx_111_1100011;
   $is_addi = $dec_bits ==? 11'bx_000_0010011;
   $is_add = $dec_bits ==? 11'b0_000_0110011;
    
         
         
   // SLTU and SLTI (set if less than, unsigned) results:
   $sltu_rslt[31:0]  = {31'b0, $src1_value < $src2_value};
   $sltiu_rslt[31:0] = {31'b0, $src1_value < $imm};
         
   // SRA and SRAI (shift right, arithmetic) results:
   //   64-bit sign-extended src1
   $sext_src1[63:0] = { {32{$src1_value[31]}}, $src1_value };
   //   64-bit sign-extended results, to be truncated
   $sra_rslt[63:0] = $sext_src1 >> $src2_value[4:0];
   $srai_rslt[63:0] = $sext_src1 >> $imm[4:0];
         
         
   $result[31:0] =   $is_addi  ?  $src1_value + $imm :
                     $is_add   ?  $src1_value + $src2_value :
                           
                     $is_andi    ?  $src1_value & $imm :
                     $is_ori     ?  $src1_value | $imm :
                     $is_xori    ?  $src1_value ^ $imm :
                     $is_slli    ?  $src1_value << $imm[5:0]  :
                     $is_srli    ?  $src1_value >> $imm[5:0]  :
                     $is_and     ?  $src1_value & $src2_value :
                     $is_or      ?  $src1_value | $src2_value :
                     $is_xor     ?  $src1_value ^ $src2_value :
                     $is_sub     ?  $src1_value - $src2_value :
                     $is_sll     ?  $src1_value << $src2_value[4:0] :
                     $is_srl     ?  $src1_value >> $src2_value[4:0] :
                     $is_sltu    ?  $sltu_rslt :
                     $is_sltiu   ?  $sltiu_rslt :
                     $is_lui     ?  {$imm[31:12], 12'b0} :
                     $is_auipc   ?  $pc + $imm :
                     $is_jal     ?  $pc + 32'd4 :
                     $is_jalr    ?  $pc + 32'd4 :
                     $is_slt   ?  ( ($src1_value[31] == $src2_value[31]) ?
                                              $sltu_rslt :
                                              {31'b0, $src1_value[31]} )          :
                     $is_slti  ?  ( ($src1_value[31] == $imm[31]) ?
                                              $sltiu_rslt :
                                              {31'b0, $src1_value[31]} )          :
                     $is_sra   ?  $sra_rslt[31:0]                           :
                     $is_srai  ?  $srai_rslt[31:0]                          :
                           
                       
                      $is_load || $is_s_instr ?  $src1_value + $imm :
          
                           
                                        32'b0;


   $taken_br   =  $is_beq  ?  ($src1_value == $src2_value) :
                        $is_bne  ?  ($src1_value != $src2_value) :
                        $is_blt  ?  (($src1_value < $src2_value)  ^ ($src1_value[31] != $src2_value[31])) :
                        $is_bge  ?  (($src1_value >= $src2_value) ^ ($src1_value[31] != $src2_value[31])) :
                        $is_bltu ?  ($src1_value < $src2_value)  :
                        $is_bgeu ?  ($src1_value >= $src2_value) :
                                    1'b0;
   
   $br_tgt_pc[31:0]  =  $pc + $imm;
   `BOGUS_USE($br_tgt_pc)
   `BOGUS_USE($funct3_valid)
   `BOGUS_USE($imm_valid)
   `BOGUS_USE($rs1)
   `BOGUS_USE($rs1_valid)
   `BOGUS_USE($rs2)
   `BOGUS_USE($rs2_valid)
   `BOGUS_USE($taken_br)
     
   $is_lui     =  $dec_bits ==? 11'bx_xxx_0110111 ;
   $is_auipc   =  $dec_bits ==? 11'bx_xxx_0010111 ;
   $is_jal     =  $dec_bits ==? 11'bx_xxx_1101111 ;
   $is_jalr    =  $dec_bits ==? 11'bx_000_1100111 ;
         
   $is_load    =  $opcode   ==  7'b0000011        ;
         
   $is_slti    =  $dec_bits ==? 11'bx_010_0010011 ;
         
   $is_sltiu   =  $dec_bits ==? 11'bx_011_0010011 ;
   $is_xori    =  $dec_bits ==? 11'bx_100_0010011 ;
   $is_ori     =  $dec_bits ==? 11'bx_110_0010011 ;
   $is_andi    =  $dec_bits ==? 11'bx_111_0010011 ;
   $is_slli    =  $dec_bits ==? 11'b0_001_0010011 ;
   $is_srli    =  $dec_bits ==? 11'b0_101_0010011 ;
   $is_srai    =  $dec_bits ==? 11'b1_101_0010011 ;
      
   $is_sub     =  $dec_bits ==? 11'b1_000_0110011 ;
   $is_sll     =  $dec_bits ==? 11'b0_001_0110011 ;
   $is_slt     =  $dec_bits ==? 11'b0_010_0110011 ;
   $is_sltu    =  $dec_bits ==? 11'b0_011_0110011 ;
   $is_xor     =  $dec_bits ==? 11'b0_100_0110011 ;
   $is_srl     =  $dec_bits ==? 11'b0_101_0110011 ;
   $is_sra     =  $dec_bits ==? 11'b1_101_0110011 ;
   $is_or      =  $dec_bits ==? 11'b0_110_0110011 ;
   $is_and     =  $dec_bits ==? 11'b0_111_0110011 ;
  
        
   
   $jalr_tgt_pc[31:0]   =  $src1_value + $imm;
   

   
   // Assert these to end simulation (before Makerchip cycle limit).
   m4_test_prog()
   
   $passed_cond = (Xreg_value_a0[30] == 32'b1) &&
                           (! $reset && $next_pc[31:0] == $pc[31:0]);
   passed = >>2$passed_cond;
   
   *failed = *cyc_cnt > M4_MAX_CYC ;
   
   m4+rf(32, 32, $reset, $rd_valid && ($rd != 5'b0), $rd, $is_load ? $rd_data : $result;, $rs1_valid, $rs1, $src1_value, $rs2_valid, $rs2, $src2_value)
       
   m4+dmem(32, 32, $reset, $result[6:2], $is_s_instr, $src2_value, $is_load, $rd_data)
   m4+cpu_viz()
\SV
                   
   endmodule
